<?php

namespace App\Api\Log;

use Monolog\Handler\AbstractProcessingHandler;
use Monolog\LogRecord;
use Symfony\Component\HttpKernel\Exception\BadRequestHttpException;

use function Symfony\Component\String\u;

/**
 * The API Platform ignores invalid filter values and logs them instead of
 * responding with an error. This checks to intercept such errors and
 * throws a 400 Bad Request to help the users understand what's happening.
 */
class InvalidFilterLogHandler extends AbstractProcessingHandler
{
	public function isHandling(LogRecord $record): bool
	{
		return $record->message == 'Invalid filter ignored';
	}

	/**
	 * Handles a record.
	 *
	 * All records may be passed to this method, and the handler should discard
	 * those that it does not want to handle.
	 *
	 * The return value of this function controls the bubbling process of the handler stack.
	 * Unless the bubbling is interrupted (by returning true), the Logger class will keep on
	 * calling further handlers in the stack with a given log record.
	 *
	 * @param LogRecord $record The record to handle
	 *
	 * @return bool true means that this handler handled the record, and that bubbling is not permitted.
	 *              false means the record was either not processed or that this handler allows bubbling.
	 */
	public function handle(LogRecord $record): bool
	{
		if (!$this->isHandling($record)) {
			return false;
		}

		// Exception message generated by the API Platform:
		// 'Values for field "%s" are not valid according to the doctrine type.'
		$fieldName = preg_replace('~^.+"(.+)?".+$~', '$1', $record->context['exception']?->getMessage() ?: "");

		if ($fieldName) {
			$fieldName = u($fieldName)->snake();
		}

		throw new BadRequestHttpException("Invalid filter value".($fieldName ? " for field {$fieldName}" : ""));
	}

	/**
	 * @SuppressWarnings(PHPMD.UnusedFormalParameter)
	 */
	protected function write(LogRecord $record): void
	{
	}
}
